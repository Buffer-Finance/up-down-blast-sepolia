import { createSchema } from "@ponder/core";

export type configContract = {
  id: string;
  address: string;
  maxSkew: bigint;
  iv: bigint;
  platformFee: bigint;
  payout: bigint;
  sf: bigint;
  stepSize: bigint;
};

export default createSchema((p) => ({
  OptionContract: p.createTable({
    id: p.string(),
    address: p.string(),
    category: p.int(),
    token0: p.string(),
    token1: p.string(),
    isPaused: p.boolean(),
    poolContract: p.bytes(),
    routerContract: p.bytes(),
    pool: p.string(),
    openUp: p.bigint(),
    openDown: p.bigint(),
    openInterestUp: p.bigint(),
    openInterestDown: p.bigint(),
    configId: p.string().references("ConfigContract.id"),
    config: p.one("configId"),
  }),
  ConfigContract: p.createTable({
    id: p.string(),
    address: p.string(),
    maxSkew: p.bigint(),
    // creationWindowContract: p.bytes(),
    // circuitBreakerContract: p.bytes(),
    iv: p.int(),
    // optionStorageContract: p.bytes(),
    platformFee: p.bigint(),
    payout: p.bigint(),
    // sfdContract: p.bytes(),
    sf: p.bigint(),
    // traderNFTContract: p.bytes(),
    stepSize: p.bigint(),
  }),
  QueuedOptionData: p.createTable({
    id: p.string(),
    optionContractId: p.string().references("OptionContract.id"),
    optionContract: p.one("optionContractId"),
    strike: p.bigint(),
    user: p.string(),
    state: p.int(),
    isAbove: p.boolean(),
    queueID: p.bigint(),
    depositToken: p.string(),
    reason: p.string().optional(),
    queueTimestamp: p.bigint(),
    cancelTimestamp: p.bigint(),
    lag: p.bigint(),
    maxFeePerContract: p.bigint(),
    processTime: p.bigint(),
    expirationTime: p.bigint(),
    numberOfContracts: p.bigint(),
    totalFee: p.bigint(),
  }),
  UserOptionData: p.createTable({
    id: p.string(),
    optionContractId: p.string().references("OptionContract.id"),
    optionContract: p.one("optionContractId"),
    optionID: p.bigint(),
    strike: p.bigint().optional(),
    totalFee: p.bigint(),
    user: p.string(),
    creationTime: p.bigint().optional(),
    queuedTimestamp: p.bigint(),
    expirationPrice: p.bigint().optional(),
    payout: p.bigint().optional(),
    state: p.int(),
    amount: p.bigint(),
    expirationTime: p.bigint().optional(),
    isAbove: p.boolean().optional(),
    queueID: p.bigint().optional(),
    settlementFee: p.bigint().optional(),
    lag: p.bigint(),
    depositToken: p.string().optional(),
    payoutUSD: p.bigint().optional(),
    totalFeeUSD: p.bigint().optional(),
  }),
  VolumePerContract: p.createTable({
    id: p.string(),
    amount: p.bigint(),
    period: p.string(),
    timestamp: p.bigint(),
    optionContractId: p.string().references("OptionContract.id"),
    optionContract: p.one("optionContractId"),
    settlementFee: p.bigint(),
  }),
  Market: p.createTable({
    id: p.string(),
    skew: p.bigint(),
    strike: p.bigint(),
    expiration: p.bigint(),
    optionContractId: p.string().references("OptionContract.id"),
    optionContract: p.one("optionContractId"),
    marketId: p.string(),
  }),
  BurnedBFR: p.createTable({
    id: p.string(),
    timestamp: p.bigint(),
    period: p.string(),
    amount: p.bigint(),
    cumulativeAmount: p.bigint(),
  }),
}));
